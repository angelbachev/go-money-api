openapi: 3.0.3
info:
  title: GO Money Tracker
  description: |-
    This is an API for tracking expenses
  contact:
    email: angelbachev@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: http://104.248.29.228:8089
  - url: http://localhost:8089
tags:
  - name: Auth
    description: Operations about auth
  - name: Users
    description: Operations about users
  - name: Accounts
    description: Operations about accounts
  - name: Categories
    description: Operations about categories
  - name: Expenses
    description: Operations about expenses
paths:
  /api/user/settings:
    put:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Update user settings
      operationId: updateUserSettings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                defaultAccountId:
                  type: number
                  format: int64
                theme: 
                  type: string
                  enum:
                    - default
                    - light
                    - dark
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Get user settings
      operationId: getUserSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSettings'
                  
  /api/accounts:
    post:
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: Create a new account
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description: 
                  type: string
                currencyCode:
                  type: string
                  format: currency
                  example: BGN
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: List accounts
      operationId: listAccounts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
                  
  /api/accounts/{accountId}:
    parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    put:
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: Update account
      operationId: updateAccount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description: 
                  type: string
                currencyCode:
                  type: string
                  format: currency
                  example: BGN
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        '404':
          description: Not found     
    delete:
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: Delete account
      operationId: deleteAccount
      parameters:
        - name: force
          in: query
          description: If param is present and its value is not 0 all categories and expenses in all categories will be deleted. Otherwise if account is not empty an error will be returned
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '204':
          description: Successful operation
        '404':
          description: Not found     
          
  /api/accounts/{accountId}/categories:
    parameters:
      - name: accountId
        in: path
        description: ID of account for which we want to create category
        required: true
        schema:
          type: integer
          format: int64
    post:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Create category
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description: 
                  type: string
                parentId:
                  type: integer
                  format: int64
                  nullable: true
                icon:
                  type: string
                
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Get category tree
      operationId: getCategoryTree
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryTree'        
  /api/accounts/{accountId}/categories/{categoryId}:
    parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Get category tree for specific category
      operationId: getCategoryTreeForSpecifiCategory
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryTree'       
    delete:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Delete category
      operationId: deleteCategory
      parameters:
        - name: force
          in: query
          description: If param is present and its value is not 0 all subcategories and expenses in category and its subcategories will be deleted. Otherwise if category is not empty an error will be returned
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '204':
          description: Successful operation
        '404':
          description: Not found      
    put:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Update category
      operationId: updateCategory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - parentId
                - icon
              properties:
                name:
                  type: string
                description: 
                  type: string
                parentId:
                  type: integer
                  format: int64
                  nullable: true
                icon:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception

  /api/category-icons:
    get:
      tags:
        - Categories
      summary: Get available category icons
      operationId: getAvailableCategoryIcons
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /files/images/categories/{icon}:
    get:
      parameters:
        - name: icon
          in: path
          description: ID of account for which we want to create expense
          required: true
          schema:
            type: string
      tags:
        - Categories
      summary: View category icon
      operationId: viewCategoryIcon
      responses:
        '200':
          description: Successful operation
                  
  /api/accounts/{accountId}/expenses:
    parameters:
      - name: accountId
        in: path
        description: ID of account for which we want to create expense
        required: true
        schema:
          type: integer
          format: int64
    post:
      security:
        - bearerAuth: []
      tags:
        - Expenses
      summary: Create expense
      operationId: createExpense
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - categoryId
                - description
                - amount
                - date
              properties:
                categoryId:
                  type: integer
                  format: int64
                description: 
                  type: string
                amount:
                  type: integer
                  format: int64
                  description: Amount in minor units eg. cents
                  example: 123.12
                date:
                  type: string
                  format: date-time
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      security:
        - bearerAuth: []
      tags:
        - Expenses
      summary: List expenses
      operationId: getExpenses
      parameters:
        - name: minAmount
          in: query
          description: Min amount in minor units
          schema:
            type: integer
            format: int64  
        - name: maxAmount
          in: query
          description: Max amount in minor units
          schema:
            type: integer
            format: int64
        - name: minDate
          in: query
          schema:
            type: string
            format: date-time  
        - name: maxDate
          in: query
          schema:
            type: string
            format: date-time
        - name: categoryIds[]
          in: query
          schema:
            type: array
            items:
              type: number
              format: int64  
        - name: page
          in: query
          description: Starts from 1
          schema:
            type: integer
            format: int64
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            format: int64  
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Expense'
                  totalCount:
                    type: number
                    format: int64
  /api/accounts/{accountId}/expenses/{expenseId}:
    parameters:
      - name: accountId
        in: path
        description: ID of account for which we want to create expense
        required: true
        schema:
          type: integer
          format: int64  
      - name: expenseId
        in: path
        description: ID of the expense to be deleted
        required: true
        schema:
          type: integer
          format: int64
    delete:
      security:
        - bearerAuth: []
      tags:
        - Expenses
      summary: Delete expense
      operationId: deleteExpense
      responses:
        '204':
          description: Successful operation
        '404':
          description: Not found
    put:
      security:
        - bearerAuth: []
      tags:
        - Expenses
      summary: Update expense
      operationId: updateExpense
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - categoryId
                - description
                - amount
                - date
              properties:
                categoryId:
                  type: integer
                  format: int64
                description: 
                  type: string
                amount:
                  type: integer
                  format: int64
                  description: Amount in minor units eg. cents
                  example: 123.12
                date:
                  type: string
                  format: date-time
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception

  /api/users:
    post:
      tags:
        - Users
      summary: Create user (Register)
      operationId: register
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/auth/tokens:
    post:
      tags:
        - Auth
      summary: Create auth token (Logs user into the system)
      operationId: login
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: object
                properties:
                  authToken:
                    type: string
                  refreshToken:
                    type: string
                  settings:
                    $ref: '#/components/schemas/UserSettings'
        '400':
          description: Invalid email/password supplied
    delete:
      security:
        - bearerAuth: []
      tags:
        - Auth
      summary: Delete auth token (Logs out user from the system)
      description: This can only be done by the logged in user.
      operationId: logout
      responses:
        '204':
          description: Auth token is succcessfully deleted
        '404':
          description: User not found/Invalid auth token
    put:
      security:
        - bearerAuth: []
      tags:
        - Auth
      summary: Refresh auth token
      operationId: createRefreshToken
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  authToken:
                    type: string
                  refreshToken:
                    type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          example: john@email.com
        createdAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
    Account:
      required:
        - id
        - name
        - description
        - currencyCode
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        currencyCode:
          type: string
          format: currency
          example: BGN
        createdAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
    Category:
      required:
        - id
        - name
        - userId
        - parentId
        - description
        - icon
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64
          nullable: true
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        createdAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
    CategoryTree:
      required:
        - id
        - userId
        - name
        - description
        - icon
        - children
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryTree'
        createdAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
    Expense:
      required:
        - id
        - userId
        - categoryId
        - description
        - amount
        - date
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        categoryId:
          type: integer
          format: int64
        description:
          type: string
        amount:
          type: integer
          format: int64
          description: Amount is in minor unit
          example: 15613
        date:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
          description: Date at which the expense happened
        createdAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
    UserSettings:
      required:
        - defaultAccountId
        - theme
        - createdAt
        - updatedAt
      type: object
      properties:
        defaultAccountId:
          type: integer
          format: int64
        theme:
          type: string
        createdAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-04-20T16:42:01Z'
